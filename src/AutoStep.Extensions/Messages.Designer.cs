//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AutoStep.Extensions {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Messages {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Messages() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("AutoStep.Extensions.Messages", typeof(Messages).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Requested additional dependency {0}, has version {1}, which is not a match for the cached version, {2}..
        /// </summary>
        internal static string CachedPackagesResolver_AdditionalDependencyVersionNotCompatibleWithCache {
            get {
                return ResourceManager.GetString("CachedPackagesResolver_AdditionalDependencyVersionNotCompatibleWithCache", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bad version in dependency cache for {0}..
        /// </summary>
        internal static string CachedPackagesResolver_BadVersionInDependencyCache {
            get {
                return ResourceManager.GetString("CachedPackagesResolver_BadVersionInDependencyCache", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cached additional dependency info for {0} is valid..
        /// </summary>
        internal static string CachedPackagesResolver_CachedAdditionalDepIsValid {
            get {
                return ResourceManager.GetString("CachedPackagesResolver_CachedAdditionalDepIsValid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cached extension dependency info for {0} is valid..
        /// </summary>
        internal static string CachedPackagesResolver_CachedExtensionInfoIsValid {
            get {
                return ResourceManager.GetString("CachedPackagesResolver_CachedExtensionInfoIsValid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Extension dependency cache data exists; verifying..
        /// </summary>
        internal static string CachedPackagesResolver_CacheExistsVerifying {
            get {
                return ResourceManager.GetString("CachedPackagesResolver_CacheExistsVerifying", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Package files available. Cache valid, using it..
        /// </summary>
        internal static string CachedPackagesResolver_CacheValid {
            get {
                return ResourceManager.GetString("CachedPackagesResolver_CacheValid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot find library file {0} for cached package {1}..
        /// </summary>
        internal static string CachedPackagesResolver_CannotFindLibraryFile {
            get {
                return ResourceManager.GetString("CachedPackagesResolver_CannotFindLibraryFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Version range specified in the {0} extension configuration, {1}, is not a match for the cached version, {2}..
        /// </summary>
        internal static string CachedPackagesResolver_ConfiguredExtensionVersionNotCompatibleWithCache {
            get {
                return ResourceManager.GetString("CachedPackagesResolver_ConfiguredExtensionVersionNotCompatibleWithCache", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Extension dependency cache contains package {0} that has not been requested by configuration..
        /// </summary>
        internal static string CachedPackagesResolver_DependencyCacheContainsUnrequiredPackage {
            get {
                return ResourceManager.GetString("CachedPackagesResolver_DependencyCacheContainsUnrequiredPackage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid extension version range specified for the {0} extension..
        /// </summary>
        internal static string CachedPackagesResolver_InvalidExtensionVersionRange {
            get {
                return ResourceManager.GetString("CachedPackagesResolver_InvalidExtensionVersionRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No entry in dependency cache for {0}..
        /// </summary>
        internal static string CachedPackagesResolver_NoEntryInDependencyCache {
            get {
                return ResourceManager.GetString("CachedPackagesResolver_NoEntryInDependencyCache", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Package files not all available; ignoring cache..
        /// </summary>
        internal static string CachedPackagesResolver_NotAllFilesAvailable {
            get {
                return ResourceManager.GetString("CachedPackagesResolver_NotAllFilesAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Install directory for cached package {0} does not exist..
        /// </summary>
        internal static string CachedPackagesResolver_PackageDirectoryDoesNotExist {
            get {
                return ResourceManager.GetString("CachedPackagesResolver_PackageDirectoryDoesNotExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cached extension version for {0} is a pre-release, but the extension configuration does not allow pre-releases..
        /// </summary>
        internal static string CachedPackagesResolver_PreReleaseInCacheNotAllowed {
            get {
                return ResourceManager.GetString("CachedPackagesResolver_PreReleaseInCacheNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set of root packages not valid; ignoring cache..
        /// </summary>
        internal static string CachedPackagesResolver_RootPackagesNotValid {
            get {
                return ResourceManager.GetString("CachedPackagesResolver_RootPackagesNotValid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set of root packages is valid; verifying package files..
        /// </summary>
        internal static string CachedPackagesResolver_RootPackagesValid {
            get {
                return ResourceManager.GetString("CachedPackagesResolver_RootPackagesValid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Corrupt or unavailable extension cache file. Ignoring cache..
        /// </summary>
        internal static string ExtensionSetLoader_CorruptExtensionCacheFile {
            get {
                return ResourceManager.GetString("ExtensionSetLoader_CorruptExtensionCacheFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Extension directory must be a fully-qualified path..
        /// </summary>
        internal static string ExtensionSetLoader_ExtensionDirectoryMustBeFullyQualified {
            get {
                return ResourceManager.GetString("ExtensionSetLoader_ExtensionDirectoryMustBeFullyQualified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot load the entry point for the {0} extension. Extension entry points must be assignable to {1}, and have a public constructor with only ILoggerFactory (optionally) as a constructor argument..
        /// </summary>
        internal static string LoadedExtensions_CannotLoadEntryPoint {
            get {
                return ResourceManager.GetString("LoadedExtensions_CannotLoadEntryPoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not locate entry point for requested extension {0}..
        /// </summary>
        internal static string LoadedExtensions_EntryPointNotAvailable {
            get {
                return ResourceManager.GetString("LoadedExtensions_EntryPointNotAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to instantiate extension entry point {0}..
        /// </summary>
        internal static string LoadedExtensions_FailedToInstantiate {
            get {
                return ResourceManager.GetString("LoadedExtensions_FailedToInstantiate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified package has not been loaded. Is it referenced by your extension?.
        /// </summary>
        internal static string LoadedExtensions_PackageNotLoaded {
            get {
                return ResourceManager.GetString("LoadedExtensions_PackageNotLoaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not locate additional dependency {0}..
        /// </summary>
        internal static string NuGetPackagesResolver_AdditionalDependencyNotFound {
            get {
                return ResourceManager.GetString("NuGetPackagesResolver_AdditionalDependencyNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid extension version range specified in the configuration for the {0} extension..
        /// </summary>
        internal static string NuGetPackagesResolver_BadVersionRange {
            get {
                return ResourceManager.GetString("NuGetPackagesResolver_BadVersionRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not locate extension package {0}..
        /// </summary>
        internal static string NuGetPackagesResolver_ExtensionNotFound {
            get {
                return ResourceManager.GetString("NuGetPackagesResolver_ExtensionNotFound", resourceCulture);
            }
        }
    }
}
